/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$down-hover-name: 'down-hover';
$down-hover-x: 71px;
$down-hover-y: 0px;
$down-hover-offset-x: -71px;
$down-hover-offset-y: 0px;
$down-hover-width: 13px;
$down-hover-height: 8px;
$down-hover-total-width: 147px;
$down-hover-total-height: 74px;
$down-hover-image: '/img/sprite.png';
$down-hover: (71px, 0px, -71px, 0px, 13px, 8px, 147px, 74px, '/img/sprite.png', 'down-hover', );
$down-name: 'down';
$down-x: 0px;
$down-y: 66px;
$down-offset-x: 0px;
$down-offset-y: -66px;
$down-width: 13px;
$down-height: 8px;
$down-total-width: 147px;
$down-total-height: 74px;
$down-image: '/img/sprite.png';
$down: (0px, 66px, 0px, -66px, 13px, 8px, 147px, 74px, '/img/sprite.png', 'down', );
$download-name: 'download';
$download-x: 0px;
$download-y: 0px;
$download-offset-x: 0px;
$download-offset-y: 0px;
$download-width: 21px;
$download-height: 16px;
$download-total-width: 147px;
$download-total-height: 74px;
$download-image: '/img/sprite.png';
$download: (0px, 0px, 0px, 0px, 21px, 16px, 147px, 74px, '/img/sprite.png', 'download', );
$up-hover-name: 'up-hover';
$up-hover-x: 63px;
$up-hover-y: 66px;
$up-hover-offset-x: -63px;
$up-hover-offset-y: -66px;
$up-hover-width: 13px;
$up-hover-height: 8px;
$up-hover-total-width: 147px;
$up-hover-total-height: 74px;
$up-hover-image: '/img/sprite.png';
$up-hover: (63px, 66px, -63px, -66px, 13px, 8px, 147px, 74px, '/img/sprite.png', 'up-hover', );
$up-name: 'up';
$up-x: 134px;
$up-y: 0px;
$up-offset-x: -134px;
$up-offset-y: 0px;
$up-width: 13px;
$up-height: 8px;
$up-total-width: 147px;
$up-total-height: 74px;
$up-image: '/img/sprite.png';
$up: (134px, 0px, -134px, 0px, 13px, 8px, 147px, 74px, '/img/sprite.png', 'up', );
$spritesheet-width: 147px;
$spritesheet-height: 74px;
$spritesheet-image: '/img/sprite.png';
$spritesheet-sprites: ($down-hover, $down, $download, $up-hover, $up, );
$spritesheet: (147px, 74px, '/img/sprite.png', $spritesheet-sprites, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Here are example usages in HTML:

`display: block` sprite:
<div class="icon-home"></div>

`display: inline-block` sprite:
<img class="icon-home" />
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
